
#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <EEPROM.h>
#include <string>
#include <stdio.h>
/* Set these to your desired credentials. */
const char *ssid = "ESPap";
const char *password = "kemal47854";

String Hexs[] = {"00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0A", "0B", "0C", "0D", "0E", "0F", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1A", "1B", "1C", "1D", "1E", "1F",
                 "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2A", "2B", "2C", "2D", "2E", "2F", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3A", "3B", "3C", "3D", "3E", "3F", "40", "41", "42",
                 "43", "44", "45", "46", "47", "48", "49", "4A", "4B", "4C", "4D", "4E", "4F", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5A", "5B", "5C", "5D", "5E", "5F", "60", "61", "62", "63", "64", "65",
                 "66", "67", "68", "69", "6A", "6B", "6C", "6D", "6E", "6F", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7A", "7B", "7C", "7D", "7E", "7F", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8A", "8B", "8C", "8D", "8E", "8F", "90", "91", "92", "93", "94", "95", "96", "97", "98",
                 "99", "9A", "9B", "9C", "9D", "9E", "9F", "A0", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "AA", "AB", "AC", "AD", "AE", "AF", "B0", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "BA", "BB", "BC",
                 "BD", "BE", "BF", "C0", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9", "CA", "CB", "CC", "CD", "CE", "CF", "D0", "D1", "D2", "D3", "D4", "D5", "D6", "D6", "D8", "D9", "DA", "DB", "DC", "DD", "DE", "DF", "E0",
                 "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9", "EA", "EB", "EC", "ED", "EE", "EF", "F0", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "FA", "FB", "FC", "FD", "FE", "FF"
                };

ESP8266WebServer server(80);

const int R1_PIN = 14;
const int R2_PIN = 12;
const int R3_PIN = 16;
const int R4_PIN = 5;
const int BUTTON_PIN = 4;



byte pBytes[200];
boolean Start = false;


int Hex2ToByte(String Hex2) {
  for (int i = 0; i <= 255; i++) {

    if (Hex2.equals(Hexs[i])) {

      return i;
    }
  }


  return 0;
}


void handleRoot() {
  server.send(200, "text/html", "<h1>OK!</h1>");
}


void GetMelody() {
char KM[200];
memset(KM,0,200);
for(int i=0;i<=pBytes[1] * 2+1;i++){
 sprintf(KM+i*2,"%02X",pBytes[i]); 
}



server.send(200, "text/html", KM);

}




void HandleCommand() {
  for (uint8_t i = 0; i < server.args(); i++) {
    if (server.argName(i).equals("M")) {

      memset(pBytes, 0, 200);

      byte H;
      size_t a, j;
      for (a = 0, j = 0; a < server.arg(i).length(); a += 2, j++) {

        H = Hex2ToByte(server.arg(i).substring(a, a + 2));

        pBytes[j] = H;

        EEPROM.write(j, H);
      }
      EEPROM.commit();

      for (int p = 0; p <= 40; p++) {

        Serial.print(pBytes[p], HEX);
      }
      Serial.println();

      // Serial.println(server.arg(i).length());
      server.send(200, "text/html", "<h1>OK!</h1>");

    }

    
  }
  server.send(404, "text/plain", "Command not found");
}


void setup() {
  Serial.begin(115200);
  EEPROM.begin(512);
  pinMode(R1_PIN, OUTPUT);
  pinMode(R2_PIN, OUTPUT);
  pinMode(R3_PIN, OUTPUT);
  pinMode(R4_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT);

  digitalWrite(R1_PIN, HIGH);
  digitalWrite(R2_PIN, HIGH);
  digitalWrite(R3_PIN, HIGH);
  digitalWrite(R4_PIN, HIGH);

  for (int a = 0; a <= 200; a++) {
    pBytes[a] = EEPROM.read(a);
  }

  WiFi.softAP(ssid, password);

  IPAddress myIP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(myIP);
  server.on("/", handleRoot);
  server.on("/command", HandleCommand);
   server.on("/get", GetMelody);
  server.begin();
  Serial.println("HTTP server started");

  for (int p = 0; p <= 40; p++) {

    Serial.print(pBytes[p], HEX);
  }
}




void loop() {



  if (digitalRead(BUTTON_PIN)) {
    for (int i = 2; i <= pBytes[1] * 2 + 1; i += 2) {
      if (!digitalRead(BUTTON_PIN)) {
        break;
      }
      CallRole(pBytes[i + 1], pBytes[i]);
    }
  } else {
    digitalWrite(R1_PIN, HIGH);
    digitalWrite(R2_PIN, HIGH);
    digitalWrite(R3_PIN, HIGH);
    digitalWrite(R4_PIN, HIGH);

  }

  server.handleClient();
    
  
  delay(10);
}


void CallRole(byte cmd, byte Delay) {

  switch (cmd) {
    case 0:
      digitalWrite(R1_PIN, HIGH);
      digitalWrite(R2_PIN, HIGH);
      digitalWrite(R3_PIN, HIGH);
      digitalWrite(R4_PIN, HIGH);
      break;
    case 1:
      digitalWrite(R1_PIN, LOW);
      digitalWrite(R2_PIN, HIGH);
      digitalWrite(R3_PIN, HIGH);
      digitalWrite(R4_PIN, HIGH);
      break;
    case 2:
      digitalWrite(R1_PIN, HIGH);
      digitalWrite(R2_PIN, LOW);
      digitalWrite(R3_PIN, HIGH);
      digitalWrite(R4_PIN, HIGH);
      break;
    case 3:
      digitalWrite(R1_PIN, HIGH);
      digitalWrite(R2_PIN, HIGH);
      digitalWrite(R3_PIN, LOW);
      digitalWrite(R4_PIN, HIGH);
      break;
    case 4:
      digitalWrite(R1_PIN, HIGH);
      digitalWrite(R2_PIN, HIGH);
      digitalWrite(R3_PIN, HIGH);
      digitalWrite(R4_PIN, LOW);
      break;
    case 5:
      digitalWrite(R1_PIN, LOW);
      digitalWrite(R2_PIN, HIGH);
      digitalWrite(R3_PIN, HIGH);
      digitalWrite(R4_PIN, LOW);
      break;
    case 6:
      digitalWrite(R1_PIN, HIGH);
      digitalWrite(R2_PIN, LOW);
      digitalWrite(R3_PIN, HIGH);
      digitalWrite(R4_PIN, LOW);
      break;
    case 7:
      digitalWrite(R1_PIN, HIGH);
      digitalWrite(R2_PIN, HIGH);
      digitalWrite(R3_PIN, LOW);
      digitalWrite(R4_PIN, LOW);
      break;
    case 8:
      digitalWrite(R1_PIN, LOW);
      digitalWrite(R2_PIN, HIGH);
      digitalWrite(R3_PIN, LOW);
      digitalWrite(R4_PIN, HIGH);
      break;
    case 9:
      digitalWrite(R1_PIN, HIGH);
      digitalWrite(R2_PIN, LOW);
      digitalWrite(R3_PIN, LOW);
      digitalWrite(R4_PIN, HIGH);
      break;
    case 10:
      digitalWrite(R1_PIN, LOW);
      digitalWrite(R2_PIN, LOW);
      digitalWrite(R3_PIN, HIGH);
      digitalWrite(R4_PIN, HIGH);
      break;
    case 11:
      digitalWrite(R1_PIN, LOW);
      digitalWrite(R2_PIN, LOW);
      digitalWrite(R3_PIN, LOW);
      digitalWrite(R4_PIN, HIGH);
      break;
    case 12:
      digitalWrite(R1_PIN, LOW);
      digitalWrite(R2_PIN, LOW);
      digitalWrite(R3_PIN, HIGH);
      digitalWrite(R4_PIN, LOW);
      break;
    case 13:
      digitalWrite(R1_PIN, LOW);
      digitalWrite(R2_PIN, HIGH);
      digitalWrite(R3_PIN, LOW);
      digitalWrite(R4_PIN, LOW);
      break;
    case 14:
      digitalWrite(R1_PIN, HIGH);
      digitalWrite(R2_PIN, LOW);
      digitalWrite(R3_PIN, LOW);
      digitalWrite(R4_PIN, LOW);
      break;
          case 15:
      digitalWrite(R1_PIN, LOW);
      digitalWrite(R2_PIN, LOW);
      digitalWrite(R3_PIN, LOW);
      digitalWrite(R4_PIN, LOW);
      break;
  }
  delay(Delay * 5);

}




